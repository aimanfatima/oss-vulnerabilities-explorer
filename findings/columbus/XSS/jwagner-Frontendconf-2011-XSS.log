20. Repo: jwagner/Frontendconf-2011
	File: p0.js
	URL: https://github.com/jwagner/Frontendconf-2011/blob/a90e5dbaa7fcfef95451242188748271e372c4fe/p0.js
	Vulnerable Pattern: document.write
	Attack Description: document.write injects content into the DOM, which can be exploited to add malicious JavaScript code.
	Vulnerable Code Snippet:
        var img = canvas.toDataURL('image/jpeg', 0.9).split(',')[1];
    } catch(e) {
        var img = canvas.toDataURL().split(',')[1];
    }
    var w = window.open();
    w.document.write('Uploading...');
    $.ajax({
        url: 'http://api.imgur.com/2/upload.json',
        type: 'POST',
        data: {
            type: 'base64',
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
        var img = canvas.toDataURL('image/jpeg', 0.9).split(',')[1];
    } catch(e) {
        var img = canvas.toDataURL().split(',')[1];
    }
    var w = window.open();
    w.document.write('Uploading...');
    $.ajax({
        url: 'http://api.imgur.com/2/upload.json',
        type: 'POST',
        data: {
            type: 'base64',
			2. An attacker could inject a malicious script where the `document.write` pattern is used, exploiting this specific function in the code.
			3. For instance, an attacker might craft a payload like `<script>alert('XSS')</script>`, which would get injected here:
        var img = canvas.toDataURL('image/jpeg', 0.9).split(',')[1];
    } catch(e) {
        var img = canvas.toDataURL().split(',')[1];
    }
    var w = window.open();
    w.document.write('Uploading...');
    $.ajax({
        url: 'http://api.imgur.com/2/upload.json',
        type: 'POST',
        data: {
            type: 'base64',
			4. When the browser renders this code, the malicious script executes, leading to an XSS attack.
