35. Repo: rpwnage/pwn-my
	File: source/js/exploits/14.6.js
	URL: https://github.com/rpwnage/pwn-my/blob/87a04148319087e8cbb7c6b6a505ed1d4b3f9404/source/js/exploits/14.6.js
	Vulnerable Pattern: eval(
	Attack Description: eval() executes strings as JavaScript code, making it highly susceptible to code injection.
	Vulnerable Code Snippet:
          port = new AudioWorkletProcessor().port;
          port.onmessage = pwn;

          // this part is magic
          // put 0xfffe000000001337 in the fastMalloc heap to fake the butterfly sizes
          eval('1 + 0x1336');

          // overwrite a1's butterfly with a fastMalloc pointer
          return {fill: 1, a: a0};
        }
      });
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
          port = new AudioWorkletProcessor().port;
          port.onmessage = pwn;

          // this part is magic
          // put 0xfffe000000001337 in the fastMalloc heap to fake the butterfly sizes
          eval('1 + 0x1336');

          // overwrite a1's butterfly with a fastMalloc pointer
          return {fill: 1, a: a0};
        }
      });
			2. An attacker could inject a malicious script where the `eval(` pattern is used, exploiting this specific function in the code.
			3. For instance, an attacker might craft a payload like `<script>alert('XSS')</script>`, which would get injected here:
          port = new AudioWorkletProcessor('<script>alert("XSS")</script>',).port;
          port.onmessage = pwn;

          // this part is magic
          // put 0xfffe000000001337 in the fastMalloc heap to fake the butterfly sizes
          eval('1 + 0x1336');

          // overwrite a1's butterfly with a fastMalloc pointer
          return {fill: 1, a: a0};
        }
      });
			4. When the browser renders this code, the malicious script executes, leading to an XSS attack.
