4. Repo: cirosantilli/linux-kernel-module-cheat
	File: run
	URL: https://github.com/cirosantilli/linux-kernel-module-cheat/blob/9c62faf2a0f2c346b0c62c2a3442291408a5c56e/run
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
        # * https://unix.stackexchange.com/questions/397939/turning-off-kaslr-to-debug-linux-kernel-using-qemu-and-gdb
        # * https://stackoverflow.com/questions/44612822/unable-to-debug-kernel-with-qemu-gdb/49840927#49840927
        #   Turned on by default since v4.12
        kernel_cli = 'console_msg_format=syslog nokaslr norandmaps panic=-1 printk.devkmsg=on printk.time=y rw'
        if self.env['kernel_cli'] is not None:
            kernel_cli += ' {}'.format(self.env['kernel_cli'])
        if self.env['quit_after_boot']:
            kernel_cli += ' {}'.format(self.env['quit_init'])
        kernel_cli_after_dash = ' lkmc_home={}'.format(self.env['guest_lkmc_home'])
        extra_emulator_args = []
        extra_qemu_args = []
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
        # * https://unix.stackexchange.com/questions/397939/turning-off-kaslr-to-debug-linux-kernel-using-qemu-and-gdb
        # * https://stackoverflow.com/questions/44612822/unable-to-debug-kernel-with-qemu-gdb/49840927#49840927
        #   Turned on by default since v4.12
        kernel_cli = 'console_msg_format=syslog nokaslr norandmaps panic=-1 printk.devkmsg=on printk.time=y rw'
        if self.env['kernel_cli'] is not None:
            kernel_cli += ' {}'.format(self.env['kernel_cli'])
        if self.env['quit_after_boot']:
            kernel_cli += ' {}'.format(self.env['quit_init'])
        kernel_cli_after_dash = ' lkmc_home={}'.format(self.env['guest_lkmc_home'])
        extra_emulator_args = []
        extra_qemu_args = []
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
