3. Repo: shadow-workers/shadow-workers
	File: c2.py
	URL: https://github.com/shadow-workers/shadow-workers/blob/58a7a8b5d51fea1c24ba77de8742543b2ca3edbd/c2.py
	Vulnerable Pattern: execute(
	Attack Description: Direct execution of SQL queries with string concatenation can lead to SQL injection.
	Vulnerable Code Snippet:

# Create FLASK APP
app = create_app()

# clear URLS table at start
db.session.execute('''delete from urls''')
db.session.commit()

@app.route('/')
def todashboard():
    return redirect('/dashboard')
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:

# Create FLASK APP
app = create_app()

# clear URLS table at start
db.session.execute('''delete from urls''')
db.session.commit()

@app.route('/')
def todashboard():
    return redirect('/dashboard')
			2. An attacker could inject malicious SQL commands where the `execute(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
