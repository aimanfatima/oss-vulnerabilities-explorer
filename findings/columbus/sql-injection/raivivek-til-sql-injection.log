114. Repo: raivivek/til
	File: toc
	URL: https://github.com/raivivek/til/blob/cb79a7227a19bd79ba1233863eb7056654289209/toc
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
def write_entries(root, output, header, footer):
    files = scan_files(root)
    out = []

    out.append(header)
    out.append("**Count: {}**\n\n".format(sum([len(x) for x in files.values()])))

    # write short-toc
    out.append("## Table of Contents\n")
    for k, v in sorted(files.items(), key=operator.itemgetter(0)):
        if len(v) < 1: continue # skip entries with no notes
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
def write_entries(root, output, header, footer):
    files = scan_files(root)
    out = []

    out.append(header)
    out.append("**Count: {}**\n\n".format(sum([len(x) for x in files.values()])))

    # write short-toc
    out.append("## Table of Contents\n")
    for k, v in sorted(files.items(), key=operator.itemgetter(0)):
        if len(v) < 1: continue # skip entries with no notes
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
