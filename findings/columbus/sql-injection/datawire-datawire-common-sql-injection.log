118. Repo: datawire/datawire-common
	File: arc
	URL: https://github.com/datawire/datawire-common/blob/fad557bdfd1d54dd0d339b8ba41fe314ea234fdb/arc
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
    notifications = None

if notifications is None:
    if sys.platform == "darwin":
        def notify(title, msg):
            t = '-title {!r}'.format("arc")
            s = '-subtitle {!r}'.format(title)
            m = '-message {!r}'.format(msg)
            os.system('terminal-notifier {}'.format(' '.join([m, t, s])))
    else:
        def notify(pfx, msg):
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    notifications = None

if notifications is None:
    if sys.platform == "darwin":
        def notify(title, msg):
            t = '-title {!r}'.format("arc")
            s = '-subtitle {!r}'.format(title)
            m = '-message {!r}'.format(msg)
            os.system('terminal-notifier {}'.format(' '.join([m, t, s])))
    else:
        def notify(pfx, msg):
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
