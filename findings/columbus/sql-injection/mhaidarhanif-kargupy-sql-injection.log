144. Repo: mhaidarhanif/kargupy
	File: euc
	URL: https://github.com/mhaidarhanif/kargupy/blob/39f202f38af4aa0e49596bd2511f596c1a140909/euc
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
    dataW = []; dataH = []
    print("[Input your data based on maximum/day]")
    for n in range(1,NEA+1):
      def askEA():
        global W,H
        ansW = "EA {}\t| Power (Watt) : ".format(n)
        ansH = "\t| Usage (Hour) : "
        W = eval(input(ansW)) # ask W
        if W > 100000 or W <= 0:
          print("[Impossible power!]")
          askEA()
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    dataW = []; dataH = []
    print("[Input your data based on maximum/day]")
    for n in range(1,NEA+1):
      def askEA():
        global W,H
        ansW = "EA {}\t| Power (Watt) : ".format(n)
        ansH = "\t| Usage (Hour) : "
        W = eval(input(ansW)) # ask W
        if W > 100000 or W <= 0:
          print("[Impossible power!]")
          askEA()
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
