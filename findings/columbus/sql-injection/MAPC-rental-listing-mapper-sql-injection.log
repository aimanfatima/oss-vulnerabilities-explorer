192. Repo: MAPC/rental-listing-mapper
	File: map
	URL: https://github.com/MAPC/rental-listing-mapper/blob/d773ae53634c859d544f42b4b7fb4b29ea9b9020/map
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
else:
    print("Using current year for YEAR")
    YEAR = datetime.now().strftime('%Y')

DATE_RANGES = {
    1: '[{year}-01-01, {year}-03-31]'.format(year=YEAR),
    2: '[{year}-04-01, {year}-06-30]'.format(year=YEAR),
    3: '[{year}-07-01, {year}-09-30]'.format(year=YEAR),
    4: '[{year}-10-01, {year}-12-31]'.format(year=YEAR)
}

Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
else:
    print("Using current year for YEAR")
    YEAR = datetime.now().strftime('%Y')

DATE_RANGES = {
    1: '[{year}-01-01, {year}-03-31]'.format(year=YEAR),
    2: '[{year}-04-01, {year}-06-30]'.format(year=YEAR),
    3: '[{year}-07-01, {year}-09-30]'.format(year=YEAR),
    4: '[{year}-10-01, {year}-12-31]'.format(year=YEAR)
}

			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
