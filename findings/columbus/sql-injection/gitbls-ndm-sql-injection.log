119. Repo: gitbls/ndm
	File: ndm
	URL: https://github.com/gitbls/ndm/blob/d572e9afa63b657fc7c925cffd69e4bf986f83ec/ndm
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
    return r

def mktmpdir(pd):
    # Makes a tmp directory /tmp/ndm.{username}
    if pd.args.tmp == None:
        pd.tmp = "/tmp/ndm.{}".format(pwd.getpwuid(os.getuid())[0])
        os.makedirs(pd.tmp, mode=0o700, exist_ok=True)
    else:
        pd.tmp = pd.args.tmp
    
def ipinvert(ipaddr):
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    return r

def mktmpdir(pd):
    # Makes a tmp directory /tmp/ndm.{username}
    if pd.args.tmp == None:
        pd.tmp = "/tmp/ndm.{}".format(pwd.getpwuid(os.getuid())[0])
        os.makedirs(pd.tmp, mode=0o700, exist_ok=True)
    else:
        pd.tmp = pd.args.tmp
    
def ipinvert(ipaddr):
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
