128. Repo: al-caveman/nsapass
	File: nsa
	URL: https://github.com/al-caveman/nsapass/blob/982d99be4a66cc50e9f6856e9b4fec89f227a8b2/nsa
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:

enable_debug = True

def frmtstr(s, frmt, show=True):
    """formats a value"""
    if not s: s = FORMAT['NONE'].format(s, **COLOURS)
    elif not show: s = FORMAT['HIDDEN'].format(s, **COLOURS)
    return FORMAT[frmt].format(s, **COLOURS)

def frmtentry(tags, entry, showpass, diff=None):
    """formats a database entry"""
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:

enable_debug = True

def frmtstr(s, frmt, show=True):
    """formats a value"""
    if not s: s = FORMAT['NONE'].format(s, **COLOURS)
    elif not show: s = FORMAT['HIDDEN'].format(s, **COLOURS)
    return FORMAT[frmt].format(s, **COLOURS)

def frmtentry(tags, entry, showpass, diff=None):
    """formats a database entry"""
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
