172. Repo: nuta/archives
	File: 2fa-cli/2fa
	URL: https://github.com/nuta/archives/blob/3db15f62dc1b4497a8c9a39e32f997470653157f/2fa-cli/2fa
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
        save_secrets(secrets)
    elif args.qrcode:
        name = args.qrcode

        if name not in secrets:
            sys.exit("2fa: {} is not registered.".format(name))

        qr = pyqrcode.create('otpauth://totp/{label}?secret={secret}'.format(
            label=urllib.parse.quote(name), secret=secrets[name]))
        print(qr.terminal(quiet_zone=1))
    else:
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
        save_secrets(secrets)
    elif args.qrcode:
        name = args.qrcode

        if name not in secrets:
            sys.exit("2fa: {} is not registered.".format(name))

        qr = pyqrcode.create('otpauth://totp/{label}?secret={secret}'.format(
            label=urllib.parse.quote(name), secret=secrets[name]))
        print(qr.terminal(quiet_zone=1))
    else:
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
