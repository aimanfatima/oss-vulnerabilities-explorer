123. Repo: Narrat/Pim
	File: pim
	URL: https://github.com/Narrat/Pim/blob/2f8d537dc2bde513016532ba63beab005594daf1/pim
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
        name = uuid.uuid4().hex
        info = (
            '[Trash Info]\n'
            'Path={}\n'
            'DeletionDate={}'
            ).format(path, time.strftime('%Y-%m-%dT%H:%M:%S'))

        f = open(TRASH + '/info/' + name + '.trashinfo', 'w')
        f.write(info)
        f.close()
        shutil.move(path, TRASH + '/files/' + name)
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
        name = uuid.uuid4().hex
        info = (
            '[Trash Info]\n'
            'Path={}\n'
            'DeletionDate={}'
            ).format(path, time.strftime('%Y-%m-%dT%H:%M:%S'))

        f = open(TRASH + '/info/' + name + '.trashinfo', 'w')
        f.write(info)
        f.close()
        shutil.move(path, TRASH + '/files/' + name)
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
