125. Repo: Kewth/retest
	File: spj
	URL: https://github.com/Kewth/retest/blob/1f275b3eedea159f6e11d3528bbcfd50b3f3c3da/spj
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
    answer_file = sys.argv[3]
    score = sys.argv[4]
    score_output = sys.argv[5]
    log_file = sys.argv[6]
    diffres = os.system( \
            'diff -b -B {} {} > {}'.format( \
            output_file, answer_file, log_file))
    if diffres == 0:
        print(score, file=open(score_output, 'w'))
    else:
        print(0, file=open(score_output, 'w'))
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    answer_file = sys.argv[3]
    score = sys.argv[4]
    score_output = sys.argv[5]
    log_file = sys.argv[6]
    diffres = os.system( \
            'diff -b -B {} {} > {}'.format( \
            output_file, answer_file, log_file))
    if diffres == 0:
        print(score, file=open(score_output, 'w'))
    else:
        print(0, file=open(score_output, 'w'))
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
