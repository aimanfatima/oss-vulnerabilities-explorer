135. Repo: LSaldyt/q-knap
	File: qnp
	URL: https://github.com/LSaldyt/q-knap/blob/687895abc2202842d38092fcddc00bf20c928d9d/qnp
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
    assert len(args) >= 1
    subscript = args[0]
    showHelp  = subscript in ['-h', '--help', '--show']
    unknown   = subscript not in subscripts
    if showHelp or unknown:
        print('Subscripts available are:\n    {}'.format(
              '\n    '.join(list(subscripts.keys()))))
        if not showHelp:
            raise ValueError('Unknown subscript: "{}"'.format(subscript))
    else:
        print(args[1:])
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    assert len(args) >= 1
    subscript = args[0]
    showHelp  = subscript in ['-h', '--help', '--show']
    unknown   = subscript not in subscripts
    if showHelp or unknown:
        print('Subscripts available are:\n    {}'.format(
              '\n    '.join(list(subscripts.keys()))))
        if not showHelp:
            raise ValueError('Unknown subscript: "{}"'.format(subscript))
    else:
        print(args[1:])
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
