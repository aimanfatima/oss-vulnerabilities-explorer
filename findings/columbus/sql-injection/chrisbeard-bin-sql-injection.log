163. Repo: chrisbeard/bin
	File: eta
	URL: https://github.com/chrisbeard/bin/blob/2f43f7175663bb27687970363a80bf7ff9ef7562/eta
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
fmts = ["%m-%d-%y", "%m-%d-%Y", "%m-%d-%y", "%m-%d-%Y", "%Y-%m-%d", "%Y%m%d"]
for fmt_str in fmts:
    try:
        date = datetime.strptime(arg, fmt_str).date()
        today = datetime.today().date()
        print("{} day(s) until {}".format((date-today).days, date))
        break
    except:
        pass
else:
    print("Invalid date format: must be MM-DD-YY or MM/DD/YY")
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
fmts = ["%m-%d-%y", "%m-%d-%Y", "%m-%d-%y", "%m-%d-%Y", "%Y-%m-%d", "%Y%m%d"]
for fmt_str in fmts:
    try:
        date = datetime.strptime(arg, fmt_str).date()
        today = datetime.today().date()
        print("{} day(s) until {}".format((date-today).days, date))
        break
    except:
        pass
else:
    print("Invalid date format: must be MM-DD-YY or MM/DD/YY")
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
