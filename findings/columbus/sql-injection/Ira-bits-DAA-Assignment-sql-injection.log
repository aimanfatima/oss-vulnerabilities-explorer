188. Repo: Ira-bits/DAA-Assignment
	File: scripts/test
	URL: https://github.com/Ira-bits/DAA-Assignment/blob/cdd7fae01bbd94af387f42073e7a333e6a0e9cbd/scripts/test
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
    curr_out_path = os.path.join(
        TESTCASE_DIR, 'tcase' + str(test_num) + ".out")
    if not os.path.exists(curr_in_path):
        test_num -= 1
        break
    print("Running test {}".format(test_num))
    exec_cmd = ALGO_LOC + " < " + curr_in_path + " > temp.out 2>/dev/null"
    diff_cmd = "diff -bBw temp.out " + curr_out_path + " > /dev/null 2>/dev/null"
    os.system(exec_cmd)
    diff_return_code = os.system(diff_cmd)

Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    curr_out_path = os.path.join(
        TESTCASE_DIR, 'tcase' + str(test_num) + ".out")
    if not os.path.exists(curr_in_path):
        test_num -= 1
        break
    print("Running test {}".format(test_num))
    exec_cmd = ALGO_LOC + " < " + curr_in_path + " > temp.out 2>/dev/null"
    diff_cmd = "diff -bBw temp.out " + curr_out_path + " > /dev/null 2>/dev/null"
    os.system(exec_cmd)
    diff_return_code = os.system(diff_cmd)

			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
