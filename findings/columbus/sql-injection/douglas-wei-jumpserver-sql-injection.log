164. Repo: douglas-wei/jumpserver
	File: jms
	URL: https://github.com/douglas-wei/jumpserver/blob/91d1a62c98af88c265a48b486962991a5beb67a3/jms
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:

try:
    from apps.jumpserver import const
    __version__ = const.VERSION
except ImportError as e:
    logging.info("Not found __version__: {}".format(e))
    logging.info("Sys path: {}".format(sys.path))
    logging.info("Python is: ")
    logging.info(subprocess.call('which python', shell=True))
    __version__ = 'Unknown'
    try:
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:

try:
    from apps.jumpserver import const
    __version__ = const.VERSION
except ImportError as e:
    logging.info("Not found __version__: {}".format(e))
    logging.info("Sys path: {}".format(sys.path))
    logging.info("Python is: ")
    logging.info(subprocess.call('which python', shell=True))
    __version__ = 'Unknown'
    try:
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
