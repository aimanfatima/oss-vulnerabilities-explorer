74. Repo: sadovnychyi/chrome-passwords-cli
	File: pass
	URL: https://github.com/sadovnychyi/chrome-passwords-cli/blob/cf2af7b45eeedab8dff815d26a49b6a45962979c/pass
	Vulnerable Pattern: execute(
	Attack Description: Direct execution of SQL queries with string concatenation can lead to SQL injection.
	Vulnerable Code Snippet:
    with tempfile.NamedTemporaryFile() as tmp:
      with open(os.path.join(HOME, CHROME, profile, LOGIN_DATA), 'rb') as f:
        tmp.write(f.read())
        tmp.flush()
      cursor = sqlite3.connect(tmp.name).cursor()
      cursor.execute('''SELECT origin_url, username_value, password_value
                        FROM logins ORDER BY times_used desc''')
      accounts = []
      for i, (origin_url, account, password) in enumerate(cursor.fetchall()):
        password = base64.b64encode(password[3:]).decode('utf8')
        url = urlparse(origin_url)
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
    with tempfile.NamedTemporaryFile() as tmp:
      with open(os.path.join(HOME, CHROME, profile, LOGIN_DATA), 'rb') as f:
        tmp.write(f.read())
        tmp.flush()
      cursor = sqlite3.connect(tmp.name).cursor()
      cursor.execute('''SELECT origin_url, username_value, password_value
                        FROM logins ORDER BY times_used desc''')
      accounts = []
      for i, (origin_url, account, password) in enumerate(cursor.fetchall()):
        password = base64.b64encode(password[3:]).decode('utf8')
        url = urlparse(origin_url)
			2. An attacker could inject malicious SQL commands where the `execute(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_id = "123"

    Malicious input that could expose all users:
    user_id = "123 OR 1=1"

    Resulting query:
    SELECT * FROM users WHERE id = 123 OR 1=1
    # This would return all users instead of just user 123
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
