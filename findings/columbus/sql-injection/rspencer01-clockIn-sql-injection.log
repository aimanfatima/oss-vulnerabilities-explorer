178. Repo: rspencer01/clockIn
	File: sql
	URL: https://github.com/rspencer01/clockIn/blob/db492079915047cac1c885cd7a7db7e7223ab456/sql
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
# Make a dummy file, called 't', and write the arguments to this
a = open('t', 'w')
a.write(' '.join(sys.argv[1:]))
a.close()
# Execute the MySQL.
os.system('mysql -u {user} --password={pw} {db} -t < t'.format(**configuration))
# Remove our temporary file
os.remove('t')
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
# Make a dummy file, called 't', and write the arguments to this
a = open('t', 'w')
a.write(' '.join(sys.argv[1:]))
a.close()
# Execute the MySQL.
os.system('mysql -u {user} --password={pw} {db} -t < t'.format(**configuration))
# Remove our temporary file
os.remove('t')
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
