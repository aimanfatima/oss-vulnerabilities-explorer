150. Repo: 9001/usr-local-bin
	File: xdi
	URL: https://github.com/9001/usr-local-bin/blob/da6b46eb49a61b66e76fe6deb5735bbb2c9a3b02/xdi
	Vulnerable Pattern: .format(
	Attack Description: Using .format() for SQL queries can be vulnerable to SQL injection if user input is not properly sanitized.
	Vulnerable Code Snippet:
			perc = 0
			if sz > 0:
				perc = (ndone * 100. / sz)
			
			spd = (ndone * 1.0 / td) / (1024 * 1024)
			eprint('\033[A  {:.0f} MiB of {:.0f} MiB, {:.2f}%, {:.2f} MiB/s  '.format(
				ndone / (1024*1024), sz / (1024*1024), perc, spd))


def hash_fobj(f, sz):
	hasher = hashlib.sha1()
Step-by-Step Attack Scenario:
			1. The vulnerable code is found in the following file:
			perc = 0
			if sz > 0:
				perc = (ndone * 100. / sz)
			
			spd = (ndone * 1.0 / td) / (1024 * 1024)
			eprint('\033[A  {:.0f} MiB of {:.0f} MiB, {:.2f}%, {:.2f} MiB/s  '.format(
				ndone / (1024*1024), sz / (1024*1024), perc, spd))


def hash_fobj(f, sz):
	hasher = hashlib.sha1()
			2. An attacker could inject malicious SQL commands where the `.format(` pattern is used.
			3. For example, an attacker might craft a payload like:
Original intended input:
    user_input = "valid_input"

    Malicious input example:
    user_input = "' OR '1'='1"

    Resulting query transformation:
    Original: SELECT * FROM table WHERE field = 'valid_input'
    Malicious: SELECT * FROM table WHERE field = '' OR '1'='1'
    # This would bypass authentication or return all records
			4. When this malicious input is processed, the SQL query structure would be altered, potentially exposing or modifying sensitive data.
